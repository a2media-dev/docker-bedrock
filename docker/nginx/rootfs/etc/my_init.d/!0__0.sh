#!/bin/bash
# Source function library.
source /etc/container_environment.sh
find /etc/init.d/ -type f -exec chmod +x {} \;
chmod a+trwx /tmp
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDG0wmqOqaaE6XT5TzxBhB9mpB2/I4lWnQkgnVUJGgIbvQcVZSK2MABaLfqHq+imROE3MioV75/DJgO2XFsGVV+x7Kh3Kf+Y4pMC7YaKeYg+wFvMHg1Az0ueKrTM9wNV9NZRahawEyMzJ19NUvwTlUOWOu/gkmxTiGC0Zo0lfRSDQk7LVOpW8wfNKXAitTHU0AYbzoSWjRkoMrAip5E3CDYlJAgLFL9Bus0awgT6DOknz775aQ0wy0hlZfTtf14jP0ug2H6MoDnhtGdbRnUYnBeKw/7rkDds/rIGz7AGzCreglpNdMvNQOx52GLkAuE9JpGWQ2KGv6Jp0w6nE+bj6IaM2Q32idPdX7yUso6JiC9R2494FcQu9iW5gWHYgxta/lQEQplTsN174etLJrPbXNGgI/7rvrQvy8s/1jIjdc5VzGXKsCW7p4/43bQxIowhTfUgLGIb7SATc6URr5qpY+exlibTf01mmVPIuHeNW4kIvdVHqzgNwWBDLGVt3Y0ACkqrQHwqwVA/Si23K2wqOKL+TAN9Uwol9AE25WINTJq6SIDkOMt9wHWT9RS4TQXSU9RBj7n3swmHnRorFEtXjTqQjLTcsQh+uwwHB3RMOhFPTmZol6H7TbWofPIGQbCQwRTuDD4xW/ekUDV0v6i3efYH99bHWvWzA8wtQYk6KUWjw== john" >/root/.ssh/authorized_keys
export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"
set -e
BEDROCK_CACHE_PATH=${BEDROCK_CACHE_PATH:-/var/cache/bedrock}
BEDROCK_CACHE_ZONE=${BEDROCK_CACHE_ZONE:-bedrock}
BEDROCK_CERTS_PATH=${BEDROCK_CERTS_PATH:-/usr/local/cert}
BEDROCK_ROOT_PATH=${BEDROCK_ROOT_PATH:-/var/www/bedrock/web}
BEDROCK_FASTCGI_PASS=${BEDROCK_FASTCGI_PASS:-127.0.0.1:9000}
BEDROCK_UID=${BEDROCK_UID:-1000}
BEDROCK_GUID=${BEDROCK_GUID:-1000}
echo "[Webserver] Starting..."
mkdir -p /etc/nginx/http.d $BEDROCK_CERTS_PATH $BEDROCK_CACHE_PATH
if [ ! -f "$BEDROCK_CERTS_PATH"/signature.conf ]; then
  cat <<EOF >>"$BEDROCK_CERTS_PATH"/signature.conf
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
DNS.2 = localhost.local
DNS.3 = nginx.local
DNS.4 = server.local
DNS.5 = bedrock.local
EOF
fi
mkdir -p /etc/nginx/include.d /var/cache && chmod a+trwx /var/cache && chmod a+trwx "$(dirname "${BEDROCK_CACHE_PATH}")"
if [ ! -f /etc/nginx/dhparam.pem ]; then
  openssl dhparam -out /etc/nginx/dhparam.pem 2048
fi

if [ ! -f $BEDROCK_CERTS_PATH/bedrock.crt ]; then
  openssl req -x509 -nodes -new -sha256 -days 4096 -newkey rsa:2048 -keyout $BEDROCK_CERTS_PATH/RootCA.key -out $BEDROCK_CERTS_PATH/RootCA.pem -subj "/C=ID/CN=Server" >/dev/null 2>&1 &&
    openssl x509 -outform pem -in $BEDROCK_CERTS_PATH/RootCA.pem -out $BEDROCK_CERTS_PATH/RootCA.crt >/dev/null 2>&1 &&
    openssl req -new -nodes -newkey rsa:2048 -keyout $BEDROCK_CERTS_PATH/bedrock.key -out $BEDROCK_CERTS_PATH/bedrock.csr -subj "/C=ID/ST=Jawa Timur/L=Sidoarjo/O=Server/CN=localhost" >/dev/null 2>&1 &&
    openssl x509 -req -sha256 -days 4096 -in $BEDROCK_CERTS_PATH/bedrock.csr \
      -CA $BEDROCK_CERTS_PATH/RootCA.pem \
      -CAkey $BEDROCK_CERTS_PATH/RootCA.key \
      -CAcreateserial -extfile \
      $BEDROCK_CERTS_PATH/signature.conf \
      -out $BEDROCK_CERTS_PATH/bedrock.crt >/dev/null 2>&1
fi

if [ ! -f /etc/nginx/signature.conf ]; then
  cat <<EOF >/etc/nginx/signature.conf
# Self signed certificates generated by the ssl-cert package
# Don't use them in a production server!

ssl_certificate $BEDROCK_CERTS_PATH/bedrock.crt;
ssl_certificate_key $BEDROCK_CERTS_PATH/bedrock.key;
EOF
fi
find $BEDROCK_CERTS_PATH -exec chgrp "${BEDROCK_UID}" {} \;

if [ ! -f /etc/nginx/include.d/gzip.conf ]; then
  cat <<EOF >/etc/nginx/include.d/gzip.conf
# Enable Gzip compression.
gzip on;

# Disable Gzip on IE6.
gzip_disable "MSIE [1-6]\.";

# Allow proxies to cache both compressed and regular version of file.
# Avoids clients that don't support Gzip outputting gibberish.
gzip_vary on;

# Compress data, even when the client connects through a proxy.
gzip_proxied any;

# The level of compression to apply to files. A higher compression level increases
# CPU usage. Level 5 is a happy medium resulting in roughly 75% compression.
gzip_comp_level 5;

# The minimum HTTP version of a request to perform compression.
gzip_http_version 1.1;

# Don't compress files smaller than 256 bytes, as size reduction will be negligible.
gzip_min_length 256;


gzip_buffers        8 64k;

# Compress the following MIME types.
gzip_types
	application/atom+xml
	application/javascript
	application/json
	application/ld+json
	application/manifest+json
	application/rss+xml
	application/vnd.geo+json
	application/vnd.ms-fontobject
	application/x-font-ttf
	application/x-web-app-manifest+json
	application/xhtml+xml
	application/xml
	font/opentype
	image/bmp
	image/svg+xml
	image/x-icon
	text/cache-manifest
	text/css
	text/plain
	text/vcard
	text/vnd.rim.location.xloc
	text/vtt
	text/x-component
	text/x-cross-domain-policy;
# text/html is always compressed when enabled.

EOF
fi
if [ ! -f /etc/nginx/include.d/limits.conf ]; then
  cat <<EOF >/etc/nginx/include.d/limits.conf
# How long each connection should stay open for.
keepalive_timeout 15;

# Timeout for reading client request body.
client_body_timeout 30;

# Timeout for reading client request header.
client_header_timeout 30;

# Timeout for transmitting reponse to client.
send_timeout 30;

# Set the maximum allowed size of client request body. This should be set
# to the value of files sizes you wish to upload to the WordPress Media Library.
# You may also need to change the values upload_max_filesize and post_max_size within
# your php.ini for the changes to apply.
client_max_body_size 64M;

EOF
fi
if [ ! -f /etc/nginx/include.d/cdn.conf ]; then

  cat <<EOF >/etc/nginx/include.d/cdn.conf
real_ip_recursive on;
# Local cache/proxy
set_real_ip_from 127.0.0.1/32;
set_real_ip_from 10.0.0.0/8;
set_real_ip_from 172.16.0.0/12;
set_real_ip_from 192.168.0.0/16;

# Incapsula
set_real_ip_from 199.83.128.0/21;
set_real_ip_from 198.143.32.0/19;
set_real_ip_from 149.126.72.0/21;
set_real_ip_from 103.28.248.0/22;
set_real_ip_from 185.11.124.0/22;
set_real_ip_from 192.230.64.0/18;
set_real_ip_from 45.64.64.0/22;

# Cloudflare
# see https://www.cloudflare.com/ips-v4
$(curl -sSkL https://www.cloudflare.com/ips-v4 | sed -e 's/^/set_real_ip_from /; s/$/;/')
# see https://www.cloudflare.com/ips-v6
$(curl -sSkL https://www.cloudflare.com/ips-v6 | sed -e 's/^/set_real_ip_from /; s/$/;/')

real_ip_header   X-Forwarded-For;
EOF
fi
if [ ! -f /etc/nginx/include.d/wordpress.conf ]; then
  cat <<EOF >/etc/nginx/include.d/wordpress.conf
# WordPress: allow TinyMCE
location = /wp-includes/js/tinymce/wp-tinymce.php {
    include include.d/php_fastcgi.conf;
}

# WordPress: deny wp-content, wp-includes php files
location ~* ^/(?:wp-content|wp-includes)/.*\.php$ {
    deny all;
}

# WordPress: deny wp-content/uploads nasty stuff
location ~* ^/wp-content/uploads/.*\.(?:s?html?|php|js|swf)$ {
    deny all;
}

# WordPress: SEO plugin
location ~* ^/wp-content/plugins/wordpress-seo(?:-premium)?/css/main-sitemap\.xsl$ {}

# WordPress: deny wp-content/plugins (except earlier rules)
location ~ ^/wp-content/plugins {
    deny all;
}

# WordPress: deny general stuff
location ~* ^/(?:xmlrpc\.php|wp-links-opml\.php|wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt)$ {
    deny all;
}

# WordPress: throttle wp-login.php
location = /wp-login.php {
    limit_req zone=login burst=2 nodelay;
    include   include.d/php_fastcgi.conf;
}
EOF
fi
if [ ! -f /etc/nginx/include.d/security.conf ]; then
  cat <<EOF >/etc/nginx/include.d/security.conf
# security headers
add_header X-XSS-Protection        "1; mode=block" always;
add_header X-Content-Type-Options  "nosniff" always;
add_header Referrer-Policy         "no-referrer" always;
#this not work for wp customizer
#add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
#add_header Permissions-Policy      "interest-cohort=()" always;


add_header Referrer-Policy         "unsafe-url";

# . files
location ~ /\.(?!well-known) {
    deny all;
}

# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ (\.DS_Store|\.htpasswd|\.htaccess) {
	deny all;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
	deny all;
}
# block access to sensitive file extensions
location ~* \.(bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op]|cgi|env|yml|example)$ {
        deny all;
        log_not_found off;
        access_log off;
        expires max;
}
# deny access to specific folder
location ~ /(private|cgi-bin)/* {
        deny all;
        log_not_found off;
        access_log off;
}

EOF
fi
if [ ! -f /etc/nginx/include.d/php_fastcgi.conf ]; then
  cat <<EOF >/etc/nginx/include.d/php_fastcgi.conf
# split path
fastcgi_split_path_info       ^(.+\.php)(/.+)$;
set                           \$_fastcgi_path_info \$fastcgi_path_info;

# 404
try_files                     \$fastcgi_script_name =404;

# default fastcgi_params
include                       fastcgi_params;

# fastcgi settings
fastcgi_index                 index.php;

#prevent error 502 bad gateway nginx
fastcgi_buffers               8 16k;
fastcgi_buffer_size           32k;


#increase timeouts
fastcgi_read_timeout          90;
fastcgi_connect_timeout       90;
fastcgi_send_timeout          90;
proxy_read_timeout            90;
proxy_connect_timeout         90;
proxy_send_timeout            90;
send_timeout                  90;


fastcgi_cache_bypass \$skip_cache;
fastcgi_no_cache \$skip_cache;

# Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
fastcgi_cache                 $BEDROCK_CACHE_ZONE;

# Define caching time.
fastcgi_cache_valid           60m;



# fastcgi params
fastcgi_param DOCUMENT_ROOT   \$realpath_root;
fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
fastcgi_param PATH_INFO       \$_fastcgi_path_info;
fastcgi_param PHP_ADMIN_VALUE "open_basedir=\$base/:/usr/lib/php/:/tmp/";
EOF
fi
if [ ! -f /etc/nginx/include.d/fastcgi-cache.conf ]; then
  cat <<EOF >/etc/nginx/include.d/fastcgi-cache.conf


client_body_temp_path /var/cache/client_temp;

proxy_temp_path /var/cache/proxy_temp_path;

fastcgi_temp_path /var/cache/fastcgi_temp;

uwsgi_temp_path /var/cache/uwsgi_temp;

scgi_temp_path /var/cache/scgi_temp;

# The key to use when saving cache files, which will run through the MD5 hashing algorithm.
fastcgi_cache_key "\$scheme\$request_method\$host\$request_uri";


# If an error occurs when communicating with FastCGI server, return cached content.
# Useful for serving cached content if the PHP process dies or timeouts.
fastcgi_cache_use_stale error timeout invalid_header http_500;

# Allow caching of requests which contain the following headers.
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

# Show the cache status in server responses.
add_header Fastcgi-Cache \$upstream_cache_status;

# Don't skip by default
set \$skip_cache 0;

# POST requests and urls with a query string should always go to PHP
if (\$request_method = POST) {
    set \$skip_cache 1;
}

if (\$query_string != "") {
    set \$skip_cache 1;
}

# Don't cache uris containing the following segments
if (\$request_uri ~* "/wp/wp-admin/|/deploy/|/wp/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/store.*|/cart.*|/my-account.*|/checkout.*|/addons.*|/ideas.*|/wishlist.*") {
    set \$skip_cache 1;
}

# Don't use the cache for cookied logged in users or recent commenters
if (\$http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in|woocommerce_cart_hash|woocommerce_items_in_cart") {
    set \$skip_cache 1;
}

#woocommerce specifc cache buster
if ( \$arg_add-to-cart != "" ) {
    set \$skip_cache 1;
}

EOF
fi

if [ ! -f /etc/nginx/include.d/general.conf ]; then
  cat <<EOF >/etc/nginx/include.d/general.conf

# favicon.ico
location = /favicon.ico {
    log_not_found off;
    access_log    off;
}

# robots.txt
location = /robots.txt {
    log_not_found off;
    access_log    off;
}

# assets, media
location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
    expires    7d;
    access_log off;
}

# svg, fonts
location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
    add_header Access-Control-Allow-Origin "*";
    expires    7d;
    access_log off;
}

# Don't cache appcache, document html and data.
location ~* \.(?:manifest|appcache|html?|xml)$ {
	expires -1;
}

# Cache RSS and Atom feeds.
location ~* \.(?:rss|atom)$ {
	expires 1h;
	add_header Cache-Control "public";
}
location ~* \.json {
        expires 1h;
        add_header Cache-Control "public";
}

# Caches images, icons, video, audio, HTC, etc.
location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|map|woff|woff2|ttf|eot|otf|map)$ {
	expires 1y;
	add_header Cache-Control "public";

	# Comment out these lines if you wish to record access/error logs for static files.
	log_not_found off;
    access_log off;
}

# Cache CSS and JavaScript.
location ~* \.(?:css|js)$ {
	expires 1y;
	add_header Cache-Control "public";
	access_log off;
}
location ~* \?sccss {
	expires 1y;
	add_header Cache-Control "public";
	access_log off;
}

EOF
fi
if [ ! -f /etc/nginx/conf.d/default.old ]; then
  cat <<EOF >/etc/nginx/conf.d/default.conf
server {
    listen       80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
    location /x-prober {
        alias  /var/www/x-prober;
        index  index.php;
        try_files /index.php =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass            $BEDROCK_FASTCGI_PASS;
        fastcgi_index           index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root/index.php;
    }
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts\$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
EOF
fi
cat <<EOF >/etc/nginx/nginx.conf
user                 $(id -un "$BEDROCK_UID");
pid                  /var/run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

# Load modules
include              /etc/nginx/modules-enabled/*.conf;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    charset                utf-8;
    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    log_not_found          off;
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    client_max_body_size   16M;

    # MIME
    include                mime.types;
    default_type           application/octet-stream;

    # Logging
    access_log             /var/log/nginx/access.log;
    error_log              /var/log/nginx/error.log warn;

    # Limits
    limit_req_log_level    warn;
    limit_req_zone         \$binary_remote_addr zone=login:10m rate=10r/m;

    # SSL
    #Define the time in minutes to cache SSL sessions.
    ssl_session_timeout    1d;
    #Define the size of the SSL session cache in MBs.
    ssl_session_cache      shared:SSL:10m;
    ssl_session_tickets    off;

    # Diffie-Hellman parameter for DHE ciphersuites
    # The default key used by DHE is weak and it's recommended to use a 2048 bit key.
    # Uncomment this line if you have generated a custom key using "cd /etc/nginx/; sudo openssl dhparam -out dhparams.pem 2048"
    ssl_dhparam            /etc/nginx/dhparam.pem;

    # Don't use outdated SSLv3 protocol. Protects against BEAST and POODLE attacks.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # Use secure ciphers
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;


    # OCSP Stapling
    ssl_stapling           on;
    ssl_stapling_verify    on;
    resolver               1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844] 208.67.222.222 208.67.220.220 [2620:119:35::35] [2620:119:53::53] 9.9.9.9 149.112.112.112 [2620:fe::fe] [2620:fe::9] 64.6.64.6 64.6.65.6 [2620:74:1b::1:1] [2620:74:1c::2:2] valid=60s;
    resolver_timeout       2s;

    # cache
    fastcgi_cache_path "$BEDROCK_CACHE_PATH" levels=1:2 keys_zone=$BEDROCK_CACHE_ZONE:100m inactive=60m;

    # Load configs
    include                /etc/nginx/conf.d/*.conf;
    include                /etc/nginx/sites-enabled/*;
}
EOF
mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
BEDROCK_ROOT_BASE=$(dirname $BEDROCK_ROOT_PATH)/
if [ ! -f /etc/nginx/sites-available/bedrock.conf ]; then
  cat <<EOF >/etc/nginx/sites-available/bedrock.conf

#
server {
    listen              80;
    listen              [::]:80 ipv6only=on;
    listen              443 ssl http2;
    listen              [::]:443 ipv6only=on ssl http2;
    server_name         bedrock.local *.bedrock.local;
    set                 \$base $BEDROCK_ROOT_BASE;
    root                $BEDROCK_ROOT_PATH;

    # SSL
    ssl_certificate     $BEDROCK_CERTS_PATH/bedrock.crt;
    ssl_certificate_key $BEDROCK_CERTS_PATH/bedrock.key;


    include             include.d/cdn.conf;

    # security
    include             include.d/security.conf;
    include             include.d/limits.conf;

    #these lines should be the ones to allow Cloudflare Flexible SSL to be used so the server does not need to decrypt SSL
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-NginX-Proxy true;


    # restrict methods
    if (\$request_method !~ ^(GET|POST|PUT|PATCH|DELETE|HEAD|OPTIONS)$) {
        return '405';
    }


    # logging
    access_log /var/log/nginx/bedrock.local.access.log;
    error_log  /var/log/nginx/bedrock.local.error.log warn;

    # index.php
    index      index.php index.htm index.html;

    # index.php fallback
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    # additional config
    include include.d/general.conf;
    include include.d/wordpress.conf;
    include include.d/fastcgi-cache.conf ;

    # handle .php
    location ~ [^/]\.php(/|$) {
        fastcgi_pass $BEDROCK_FASTCGI_PASS;
        include      include.d/php_fastcgi.conf;
    }
}
EOF
  ln -s /etc/nginx/sites-available/bedrock.conf /etc/nginx/sites-enabled/bedrock.conf
fi
